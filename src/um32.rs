use std::io::{self, Read, Write};

pub fn run(program: Vec<u32>) -> io::Result<()> {
    let mut data = vec![program; 1];
    let mut ip = 0;
    let stdin_ = io::stdin();
    let mut stdin = stdin_.lock();
    let stdout_ = io::stdout();
    let mut stdout = stdout_.lock();
    let mut r0 = 0u32;
    let mut r1 = 0u32;
    let mut r2 = 0u32;
    let mut r3 = 0u32;
    let mut r4 = 0u32;
    let mut r5 = 0u32;
    let mut r6 = 0u32;
    let mut r7 = 0u32;

    macro_rules! unroll3 {
        ($regs:expr, $m:ident) => {
            match $regs {
                0b000_000_000 => { $m!(r0, r0, r0); }
                0b000_000_001 => { $m!(r0, r0, r1); }
                0b000_000_010 => { $m!(r0, r0, r2); }
                0b000_000_011 => { $m!(r0, r0, r3); }
                0b000_000_100 => { $m!(r0, r0, r4); }
                0b000_000_101 => { $m!(r0, r0, r5); }
                0b000_000_110 => { $m!(r0, r0, r6); }
                0b000_000_111 => { $m!(r0, r0, r7); }

                0b000_001_000 => { $m!(r0, r1, r0); }
                0b000_001_001 => { $m!(r0, r1, r1); }
                0b000_001_010 => { $m!(r0, r1, r2); }
                0b000_001_011 => { $m!(r0, r1, r3); }
                0b000_001_100 => { $m!(r0, r1, r4); }
                0b000_001_101 => { $m!(r0, r1, r5); }
                0b000_001_110 => { $m!(r0, r1, r6); }
                0b000_001_111 => { $m!(r0, r1, r7); }

                0b000_010_000 => { $m!(r0, r2, r0); }
                0b000_010_001 => { $m!(r0, r2, r1); }
                0b000_010_010 => { $m!(r0, r2, r2); }
                0b000_010_011 => { $m!(r0, r2, r3); }
                0b000_010_100 => { $m!(r0, r2, r4); }
                0b000_010_101 => { $m!(r0, r2, r5); }
                0b000_010_110 => { $m!(r0, r2, r6); }
                0b000_010_111 => { $m!(r0, r2, r7); }

                0b000_011_000 => { $m!(r0, r3, r0); }
                0b000_011_001 => { $m!(r0, r3, r1); }
                0b000_011_010 => { $m!(r0, r3, r2); }
                0b000_011_011 => { $m!(r0, r3, r3); }
                0b000_011_100 => { $m!(r0, r3, r4); }
                0b000_011_101 => { $m!(r0, r3, r5); }
                0b000_011_110 => { $m!(r0, r3, r6); }
                0b000_011_111 => { $m!(r0, r3, r7); }

                0b000_100_000 => { $m!(r0, r4, r0); }
                0b000_100_001 => { $m!(r0, r4, r1); }
                0b000_100_010 => { $m!(r0, r4, r2); }
                0b000_100_011 => { $m!(r0, r4, r3); }
                0b000_100_100 => { $m!(r0, r4, r4); }
                0b000_100_101 => { $m!(r0, r4, r5); }
                0b000_100_110 => { $m!(r0, r4, r6); }
                0b000_100_111 => { $m!(r0, r4, r7); }

                0b000_101_000 => { $m!(r0, r5, r0); }
                0b000_101_001 => { $m!(r0, r5, r1); }
                0b000_101_010 => { $m!(r0, r5, r2); }
                0b000_101_011 => { $m!(r0, r5, r3); }
                0b000_101_100 => { $m!(r0, r5, r4); }
                0b000_101_101 => { $m!(r0, r5, r5); }
                0b000_101_110 => { $m!(r0, r5, r6); }
                0b000_101_111 => { $m!(r0, r5, r7); }

                0b000_110_000 => { $m!(r0, r6, r0); }
                0b000_110_001 => { $m!(r0, r6, r1); }
                0b000_110_010 => { $m!(r0, r6, r2); }
                0b000_110_011 => { $m!(r0, r6, r3); }
                0b000_110_100 => { $m!(r0, r6, r4); }
                0b000_110_101 => { $m!(r0, r6, r5); }
                0b000_110_110 => { $m!(r0, r6, r6); }
                0b000_110_111 => { $m!(r0, r6, r7); }

                0b000_111_000 => { $m!(r0, r7, r0); }
                0b000_111_001 => { $m!(r0, r7, r1); }
                0b000_111_010 => { $m!(r0, r7, r2); }
                0b000_111_011 => { $m!(r0, r7, r3); }
                0b000_111_100 => { $m!(r0, r7, r4); }
                0b000_111_101 => { $m!(r0, r7, r5); }
                0b000_111_110 => { $m!(r0, r7, r6); }
                0b000_111_111 => { $m!(r0, r7, r7); }

                0b001_000_000 => { $m!(r1, r0, r0); }
                0b001_000_001 => { $m!(r1, r0, r1); }
                0b001_000_010 => { $m!(r1, r0, r2); }
                0b001_000_011 => { $m!(r1, r0, r3); }
                0b001_000_100 => { $m!(r1, r0, r4); }
                0b001_000_101 => { $m!(r1, r0, r5); }
                0b001_000_110 => { $m!(r1, r0, r6); }
                0b001_000_111 => { $m!(r1, r0, r7); }

                0b001_001_000 => { $m!(r1, r1, r0); }
                0b001_001_001 => { $m!(r1, r1, r1); }
                0b001_001_010 => { $m!(r1, r1, r2); }
                0b001_001_011 => { $m!(r1, r1, r3); }
                0b001_001_100 => { $m!(r1, r1, r4); }
                0b001_001_101 => { $m!(r1, r1, r5); }
                0b001_001_110 => { $m!(r1, r1, r6); }
                0b001_001_111 => { $m!(r1, r1, r7); }

                0b001_010_000 => { $m!(r1, r2, r0); }
                0b001_010_001 => { $m!(r1, r2, r1); }
                0b001_010_010 => { $m!(r1, r2, r2); }
                0b001_010_011 => { $m!(r1, r2, r3); }
                0b001_010_100 => { $m!(r1, r2, r4); }
                0b001_010_101 => { $m!(r1, r2, r5); }
                0b001_010_110 => { $m!(r1, r2, r6); }
                0b001_010_111 => { $m!(r1, r2, r7); }

                0b001_011_000 => { $m!(r1, r3, r0); }
                0b001_011_001 => { $m!(r1, r3, r1); }
                0b001_011_010 => { $m!(r1, r3, r2); }
                0b001_011_011 => { $m!(r1, r3, r3); }
                0b001_011_100 => { $m!(r1, r3, r4); }
                0b001_011_101 => { $m!(r1, r3, r5); }
                0b001_011_110 => { $m!(r1, r3, r6); }
                0b001_011_111 => { $m!(r1, r3, r7); }

                0b001_100_000 => { $m!(r1, r4, r0); }
                0b001_100_001 => { $m!(r1, r4, r1); }
                0b001_100_010 => { $m!(r1, r4, r2); }
                0b001_100_011 => { $m!(r1, r4, r3); }
                0b001_100_100 => { $m!(r1, r4, r4); }
                0b001_100_101 => { $m!(r1, r4, r5); }
                0b001_100_110 => { $m!(r1, r4, r6); }
                0b001_100_111 => { $m!(r1, r4, r7); }

                0b001_101_000 => { $m!(r1, r5, r0); }
                0b001_101_001 => { $m!(r1, r5, r1); }
                0b001_101_010 => { $m!(r1, r5, r2); }
                0b001_101_011 => { $m!(r1, r5, r3); }
                0b001_101_100 => { $m!(r1, r5, r4); }
                0b001_101_101 => { $m!(r1, r5, r5); }
                0b001_101_110 => { $m!(r1, r5, r6); }
                0b001_101_111 => { $m!(r1, r5, r7); }

                0b001_110_000 => { $m!(r1, r6, r0); }
                0b001_110_001 => { $m!(r1, r6, r1); }
                0b001_110_010 => { $m!(r1, r6, r2); }
                0b001_110_011 => { $m!(r1, r6, r3); }
                0b001_110_100 => { $m!(r1, r6, r4); }
                0b001_110_101 => { $m!(r1, r6, r5); }
                0b001_110_110 => { $m!(r1, r6, r6); }
                0b001_110_111 => { $m!(r1, r6, r7); }

                0b001_111_000 => { $m!(r1, r7, r0); }
                0b001_111_001 => { $m!(r1, r7, r1); }
                0b001_111_010 => { $m!(r1, r7, r2); }
                0b001_111_011 => { $m!(r1, r7, r3); }
                0b001_111_100 => { $m!(r1, r7, r4); }
                0b001_111_101 => { $m!(r1, r7, r5); }
                0b001_111_110 => { $m!(r1, r7, r6); }
                0b001_111_111 => { $m!(r1, r7, r7); }

                0b010_000_000 => { $m!(r2, r0, r0); }
                0b010_000_001 => { $m!(r2, r0, r1); }
                0b010_000_010 => { $m!(r2, r0, r2); }
                0b010_000_011 => { $m!(r2, r0, r3); }
                0b010_000_100 => { $m!(r2, r0, r4); }
                0b010_000_101 => { $m!(r2, r0, r5); }
                0b010_000_110 => { $m!(r2, r0, r6); }
                0b010_000_111 => { $m!(r2, r0, r7); }

                0b010_001_000 => { $m!(r2, r1, r0); }
                0b010_001_001 => { $m!(r2, r1, r1); }
                0b010_001_010 => { $m!(r2, r1, r2); }
                0b010_001_011 => { $m!(r2, r1, r3); }
                0b010_001_100 => { $m!(r2, r1, r4); }
                0b010_001_101 => { $m!(r2, r1, r5); }
                0b010_001_110 => { $m!(r2, r1, r6); }
                0b010_001_111 => { $m!(r2, r1, r7); }

                0b010_010_000 => { $m!(r2, r2, r0); }
                0b010_010_001 => { $m!(r2, r2, r1); }
                0b010_010_010 => { $m!(r2, r2, r2); }
                0b010_010_011 => { $m!(r2, r2, r3); }
                0b010_010_100 => { $m!(r2, r2, r4); }
                0b010_010_101 => { $m!(r2, r2, r5); }
                0b010_010_110 => { $m!(r2, r2, r6); }
                0b010_010_111 => { $m!(r2, r2, r7); }

                0b010_011_000 => { $m!(r2, r3, r0); }
                0b010_011_001 => { $m!(r2, r3, r1); }
                0b010_011_010 => { $m!(r2, r3, r2); }
                0b010_011_011 => { $m!(r2, r3, r3); }
                0b010_011_100 => { $m!(r2, r3, r4); }
                0b010_011_101 => { $m!(r2, r3, r5); }
                0b010_011_110 => { $m!(r2, r3, r6); }
                0b010_011_111 => { $m!(r2, r3, r7); }

                0b010_100_000 => { $m!(r2, r4, r0); }
                0b010_100_001 => { $m!(r2, r4, r1); }
                0b010_100_010 => { $m!(r2, r4, r2); }
                0b010_100_011 => { $m!(r2, r4, r3); }
                0b010_100_100 => { $m!(r2, r4, r4); }
                0b010_100_101 => { $m!(r2, r4, r5); }
                0b010_100_110 => { $m!(r2, r4, r6); }
                0b010_100_111 => { $m!(r2, r4, r7); }

                0b010_101_000 => { $m!(r2, r5, r0); }
                0b010_101_001 => { $m!(r2, r5, r1); }
                0b010_101_010 => { $m!(r2, r5, r2); }
                0b010_101_011 => { $m!(r2, r5, r3); }
                0b010_101_100 => { $m!(r2, r5, r4); }
                0b010_101_101 => { $m!(r2, r5, r5); }
                0b010_101_110 => { $m!(r2, r5, r6); }
                0b010_101_111 => { $m!(r2, r5, r7); }

                0b010_110_000 => { $m!(r2, r6, r0); }
                0b010_110_001 => { $m!(r2, r6, r1); }
                0b010_110_010 => { $m!(r2, r6, r2); }
                0b010_110_011 => { $m!(r2, r6, r3); }
                0b010_110_100 => { $m!(r2, r6, r4); }
                0b010_110_101 => { $m!(r2, r6, r5); }
                0b010_110_110 => { $m!(r2, r6, r6); }
                0b010_110_111 => { $m!(r2, r6, r7); }

                0b010_111_000 => { $m!(r2, r7, r0); }
                0b010_111_001 => { $m!(r2, r7, r1); }
                0b010_111_010 => { $m!(r2, r7, r2); }
                0b010_111_011 => { $m!(r2, r7, r3); }
                0b010_111_100 => { $m!(r2, r7, r4); }
                0b010_111_101 => { $m!(r2, r7, r5); }
                0b010_111_110 => { $m!(r2, r7, r6); }
                0b010_111_111 => { $m!(r2, r7, r7); }

                0b011_000_000 => { $m!(r3, r0, r0); }
                0b011_000_001 => { $m!(r3, r0, r1); }
                0b011_000_010 => { $m!(r3, r0, r2); }
                0b011_000_011 => { $m!(r3, r0, r3); }
                0b011_000_100 => { $m!(r3, r0, r4); }
                0b011_000_101 => { $m!(r3, r0, r5); }
                0b011_000_110 => { $m!(r3, r0, r6); }
                0b011_000_111 => { $m!(r3, r0, r7); }

                0b011_001_000 => { $m!(r3, r1, r0); }
                0b011_001_001 => { $m!(r3, r1, r1); }
                0b011_001_010 => { $m!(r3, r1, r2); }
                0b011_001_011 => { $m!(r3, r1, r3); }
                0b011_001_100 => { $m!(r3, r1, r4); }
                0b011_001_101 => { $m!(r3, r1, r5); }
                0b011_001_110 => { $m!(r3, r1, r6); }
                0b011_001_111 => { $m!(r3, r1, r7); }

                0b011_010_000 => { $m!(r3, r2, r0); }
                0b011_010_001 => { $m!(r3, r2, r1); }
                0b011_010_010 => { $m!(r3, r2, r2); }
                0b011_010_011 => { $m!(r3, r2, r3); }
                0b011_010_100 => { $m!(r3, r2, r4); }
                0b011_010_101 => { $m!(r3, r2, r5); }
                0b011_010_110 => { $m!(r3, r2, r6); }
                0b011_010_111 => { $m!(r3, r2, r7); }

                0b011_011_000 => { $m!(r3, r3, r0); }
                0b011_011_001 => { $m!(r3, r3, r1); }
                0b011_011_010 => { $m!(r3, r3, r2); }
                0b011_011_011 => { $m!(r3, r3, r3); }
                0b011_011_100 => { $m!(r3, r3, r4); }
                0b011_011_101 => { $m!(r3, r3, r5); }
                0b011_011_110 => { $m!(r3, r3, r6); }
                0b011_011_111 => { $m!(r3, r3, r7); }

                0b011_100_000 => { $m!(r3, r4, r0); }
                0b011_100_001 => { $m!(r3, r4, r1); }
                0b011_100_010 => { $m!(r3, r4, r2); }
                0b011_100_011 => { $m!(r3, r4, r3); }
                0b011_100_100 => { $m!(r3, r4, r4); }
                0b011_100_101 => { $m!(r3, r4, r5); }
                0b011_100_110 => { $m!(r3, r4, r6); }
                0b011_100_111 => { $m!(r3, r4, r7); }

                0b011_101_000 => { $m!(r3, r5, r0); }
                0b011_101_001 => { $m!(r3, r5, r1); }
                0b011_101_010 => { $m!(r3, r5, r2); }
                0b011_101_011 => { $m!(r3, r5, r3); }
                0b011_101_100 => { $m!(r3, r5, r4); }
                0b011_101_101 => { $m!(r3, r5, r5); }
                0b011_101_110 => { $m!(r3, r5, r6); }
                0b011_101_111 => { $m!(r3, r5, r7); }

                0b011_110_000 => { $m!(r3, r6, r0); }
                0b011_110_001 => { $m!(r3, r6, r1); }
                0b011_110_010 => { $m!(r3, r6, r2); }
                0b011_110_011 => { $m!(r3, r6, r3); }
                0b011_110_100 => { $m!(r3, r6, r4); }
                0b011_110_101 => { $m!(r3, r6, r5); }
                0b011_110_110 => { $m!(r3, r6, r6); }
                0b011_110_111 => { $m!(r3, r6, r7); }

                0b011_111_000 => { $m!(r3, r7, r0); }
                0b011_111_001 => { $m!(r3, r7, r1); }
                0b011_111_010 => { $m!(r3, r7, r2); }
                0b011_111_011 => { $m!(r3, r7, r3); }
                0b011_111_100 => { $m!(r3, r7, r4); }
                0b011_111_101 => { $m!(r3, r7, r5); }
                0b011_111_110 => { $m!(r3, r7, r6); }
                0b011_111_111 => { $m!(r3, r7, r7); }

                0b100_000_000 => { $m!(r4, r0, r0); }
                0b100_000_001 => { $m!(r4, r0, r1); }
                0b100_000_010 => { $m!(r4, r0, r2); }
                0b100_000_011 => { $m!(r4, r0, r3); }
                0b100_000_100 => { $m!(r4, r0, r4); }
                0b100_000_101 => { $m!(r4, r0, r5); }
                0b100_000_110 => { $m!(r4, r0, r6); }
                0b100_000_111 => { $m!(r4, r0, r7); }

                0b100_001_000 => { $m!(r4, r1, r0); }
                0b100_001_001 => { $m!(r4, r1, r1); }
                0b100_001_010 => { $m!(r4, r1, r2); }
                0b100_001_011 => { $m!(r4, r1, r3); }
                0b100_001_100 => { $m!(r4, r1, r4); }
                0b100_001_101 => { $m!(r4, r1, r5); }
                0b100_001_110 => { $m!(r4, r1, r6); }
                0b100_001_111 => { $m!(r4, r1, r7); }

                0b100_010_000 => { $m!(r4, r2, r0); }
                0b100_010_001 => { $m!(r4, r2, r1); }
                0b100_010_010 => { $m!(r4, r2, r2); }
                0b100_010_011 => { $m!(r4, r2, r3); }
                0b100_010_100 => { $m!(r4, r2, r4); }
                0b100_010_101 => { $m!(r4, r2, r5); }
                0b100_010_110 => { $m!(r4, r2, r6); }
                0b100_010_111 => { $m!(r4, r2, r7); }

                0b100_011_000 => { $m!(r4, r3, r0); }
                0b100_011_001 => { $m!(r4, r3, r1); }
                0b100_011_010 => { $m!(r4, r3, r2); }
                0b100_011_011 => { $m!(r4, r3, r3); }
                0b100_011_100 => { $m!(r4, r3, r4); }
                0b100_011_101 => { $m!(r4, r3, r5); }
                0b100_011_110 => { $m!(r4, r3, r6); }
                0b100_011_111 => { $m!(r4, r3, r7); }

                0b100_100_000 => { $m!(r4, r4, r0); }
                0b100_100_001 => { $m!(r4, r4, r1); }
                0b100_100_010 => { $m!(r4, r4, r2); }
                0b100_100_011 => { $m!(r4, r4, r3); }
                0b100_100_100 => { $m!(r4, r4, r4); }
                0b100_100_101 => { $m!(r4, r4, r5); }
                0b100_100_110 => { $m!(r4, r4, r6); }
                0b100_100_111 => { $m!(r4, r4, r7); }

                0b100_101_000 => { $m!(r4, r5, r0); }
                0b100_101_001 => { $m!(r4, r5, r1); }
                0b100_101_010 => { $m!(r4, r5, r2); }
                0b100_101_011 => { $m!(r4, r5, r3); }
                0b100_101_100 => { $m!(r4, r5, r4); }
                0b100_101_101 => { $m!(r4, r5, r5); }
                0b100_101_110 => { $m!(r4, r5, r6); }
                0b100_101_111 => { $m!(r4, r5, r7); }

                0b100_110_000 => { $m!(r4, r6, r0); }
                0b100_110_001 => { $m!(r4, r6, r1); }
                0b100_110_010 => { $m!(r4, r6, r2); }
                0b100_110_011 => { $m!(r4, r6, r3); }
                0b100_110_100 => { $m!(r4, r6, r4); }
                0b100_110_101 => { $m!(r4, r6, r5); }
                0b100_110_110 => { $m!(r4, r6, r6); }
                0b100_110_111 => { $m!(r4, r6, r7); }

                0b100_111_000 => { $m!(r4, r7, r0); }
                0b100_111_001 => { $m!(r4, r7, r1); }
                0b100_111_010 => { $m!(r4, r7, r2); }
                0b100_111_011 => { $m!(r4, r7, r3); }
                0b100_111_100 => { $m!(r4, r7, r4); }
                0b100_111_101 => { $m!(r4, r7, r5); }
                0b100_111_110 => { $m!(r4, r7, r6); }
                0b100_111_111 => { $m!(r4, r7, r7); }

                0b101_000_000 => { $m!(r5, r0, r0); }
                0b101_000_001 => { $m!(r5, r0, r1); }
                0b101_000_010 => { $m!(r5, r0, r2); }
                0b101_000_011 => { $m!(r5, r0, r3); }
                0b101_000_100 => { $m!(r5, r0, r4); }
                0b101_000_101 => { $m!(r5, r0, r5); }
                0b101_000_110 => { $m!(r5, r0, r6); }
                0b101_000_111 => { $m!(r5, r0, r7); }

                0b101_001_000 => { $m!(r5, r1, r0); }
                0b101_001_001 => { $m!(r5, r1, r1); }
                0b101_001_010 => { $m!(r5, r1, r2); }
                0b101_001_011 => { $m!(r5, r1, r3); }
                0b101_001_100 => { $m!(r5, r1, r4); }
                0b101_001_101 => { $m!(r5, r1, r5); }
                0b101_001_110 => { $m!(r5, r1, r6); }
                0b101_001_111 => { $m!(r5, r1, r7); }

                0b101_010_000 => { $m!(r5, r2, r0); }
                0b101_010_001 => { $m!(r5, r2, r1); }
                0b101_010_010 => { $m!(r5, r2, r2); }
                0b101_010_011 => { $m!(r5, r2, r3); }
                0b101_010_100 => { $m!(r5, r2, r4); }
                0b101_010_101 => { $m!(r5, r2, r5); }
                0b101_010_110 => { $m!(r5, r2, r6); }
                0b101_010_111 => { $m!(r5, r2, r7); }

                0b101_011_000 => { $m!(r5, r3, r0); }
                0b101_011_001 => { $m!(r5, r3, r1); }
                0b101_011_010 => { $m!(r5, r3, r2); }
                0b101_011_011 => { $m!(r5, r3, r3); }
                0b101_011_100 => { $m!(r5, r3, r4); }
                0b101_011_101 => { $m!(r5, r3, r5); }
                0b101_011_110 => { $m!(r5, r3, r6); }
                0b101_011_111 => { $m!(r5, r3, r7); }

                0b101_100_000 => { $m!(r5, r4, r0); }
                0b101_100_001 => { $m!(r5, r4, r1); }
                0b101_100_010 => { $m!(r5, r4, r2); }
                0b101_100_011 => { $m!(r5, r4, r3); }
                0b101_100_100 => { $m!(r5, r4, r4); }
                0b101_100_101 => { $m!(r5, r4, r5); }
                0b101_100_110 => { $m!(r5, r4, r6); }
                0b101_100_111 => { $m!(r5, r4, r7); }

                0b101_101_000 => { $m!(r5, r5, r0); }
                0b101_101_001 => { $m!(r5, r5, r1); }
                0b101_101_010 => { $m!(r5, r5, r2); }
                0b101_101_011 => { $m!(r5, r5, r3); }
                0b101_101_100 => { $m!(r5, r5, r4); }
                0b101_101_101 => { $m!(r5, r5, r5); }
                0b101_101_110 => { $m!(r5, r5, r6); }
                0b101_101_111 => { $m!(r5, r5, r7); }

                0b101_110_000 => { $m!(r5, r6, r0); }
                0b101_110_001 => { $m!(r5, r6, r1); }
                0b101_110_010 => { $m!(r5, r6, r2); }
                0b101_110_011 => { $m!(r5, r6, r3); }
                0b101_110_100 => { $m!(r5, r6, r4); }
                0b101_110_101 => { $m!(r5, r6, r5); }
                0b101_110_110 => { $m!(r5, r6, r6); }
                0b101_110_111 => { $m!(r5, r6, r7); }

                0b101_111_000 => { $m!(r5, r7, r0); }
                0b101_111_001 => { $m!(r5, r7, r1); }
                0b101_111_010 => { $m!(r5, r7, r2); }
                0b101_111_011 => { $m!(r5, r7, r3); }
                0b101_111_100 => { $m!(r5, r7, r4); }
                0b101_111_101 => { $m!(r5, r7, r5); }
                0b101_111_110 => { $m!(r5, r7, r6); }
                0b101_111_111 => { $m!(r5, r7, r7); }

                0b110_000_000 => { $m!(r6, r0, r0); }
                0b110_000_001 => { $m!(r6, r0, r1); }
                0b110_000_010 => { $m!(r6, r0, r2); }
                0b110_000_011 => { $m!(r6, r0, r3); }
                0b110_000_100 => { $m!(r6, r0, r4); }
                0b110_000_101 => { $m!(r6, r0, r5); }
                0b110_000_110 => { $m!(r6, r0, r6); }
                0b110_000_111 => { $m!(r6, r0, r7); }

                0b110_001_000 => { $m!(r6, r1, r0); }
                0b110_001_001 => { $m!(r6, r1, r1); }
                0b110_001_010 => { $m!(r6, r1, r2); }
                0b110_001_011 => { $m!(r6, r1, r3); }
                0b110_001_100 => { $m!(r6, r1, r4); }
                0b110_001_101 => { $m!(r6, r1, r5); }
                0b110_001_110 => { $m!(r6, r1, r6); }
                0b110_001_111 => { $m!(r6, r1, r7); }

                0b110_010_000 => { $m!(r6, r2, r0); }
                0b110_010_001 => { $m!(r6, r2, r1); }
                0b110_010_010 => { $m!(r6, r2, r2); }
                0b110_010_011 => { $m!(r6, r2, r3); }
                0b110_010_100 => { $m!(r6, r2, r4); }
                0b110_010_101 => { $m!(r6, r2, r5); }
                0b110_010_110 => { $m!(r6, r2, r6); }
                0b110_010_111 => { $m!(r6, r2, r7); }

                0b110_011_000 => { $m!(r6, r3, r0); }
                0b110_011_001 => { $m!(r6, r3, r1); }
                0b110_011_010 => { $m!(r6, r3, r2); }
                0b110_011_011 => { $m!(r6, r3, r3); }
                0b110_011_100 => { $m!(r6, r3, r4); }
                0b110_011_101 => { $m!(r6, r3, r5); }
                0b110_011_110 => { $m!(r6, r3, r6); }
                0b110_011_111 => { $m!(r6, r3, r7); }

                0b110_100_000 => { $m!(r6, r4, r0); }
                0b110_100_001 => { $m!(r6, r4, r1); }
                0b110_100_010 => { $m!(r6, r4, r2); }
                0b110_100_011 => { $m!(r6, r4, r3); }
                0b110_100_100 => { $m!(r6, r4, r4); }
                0b110_100_101 => { $m!(r6, r4, r5); }
                0b110_100_110 => { $m!(r6, r4, r6); }
                0b110_100_111 => { $m!(r6, r4, r7); }

                0b110_101_000 => { $m!(r6, r5, r0); }
                0b110_101_001 => { $m!(r6, r5, r1); }
                0b110_101_010 => { $m!(r6, r5, r2); }
                0b110_101_011 => { $m!(r6, r5, r3); }
                0b110_101_100 => { $m!(r6, r5, r4); }
                0b110_101_101 => { $m!(r6, r5, r5); }
                0b110_101_110 => { $m!(r6, r5, r6); }
                0b110_101_111 => { $m!(r6, r5, r7); }

                0b110_110_000 => { $m!(r6, r6, r0); }
                0b110_110_001 => { $m!(r6, r6, r1); }
                0b110_110_010 => { $m!(r6, r6, r2); }
                0b110_110_011 => { $m!(r6, r6, r3); }
                0b110_110_100 => { $m!(r6, r6, r4); }
                0b110_110_101 => { $m!(r6, r6, r5); }
                0b110_110_110 => { $m!(r6, r6, r6); }
                0b110_110_111 => { $m!(r6, r6, r7); }

                0b110_111_000 => { $m!(r6, r7, r0); }
                0b110_111_001 => { $m!(r6, r7, r1); }
                0b110_111_010 => { $m!(r6, r7, r2); }
                0b110_111_011 => { $m!(r6, r7, r3); }
                0b110_111_100 => { $m!(r6, r7, r4); }
                0b110_111_101 => { $m!(r6, r7, r5); }
                0b110_111_110 => { $m!(r6, r7, r6); }
                0b110_111_111 => { $m!(r6, r7, r7); }

                0b111_000_000 => { $m!(r7, r0, r0); }
                0b111_000_001 => { $m!(r7, r0, r1); }
                0b111_000_010 => { $m!(r7, r0, r2); }
                0b111_000_011 => { $m!(r7, r0, r3); }
                0b111_000_100 => { $m!(r7, r0, r4); }
                0b111_000_101 => { $m!(r7, r0, r5); }
                0b111_000_110 => { $m!(r7, r0, r6); }
                0b111_000_111 => { $m!(r7, r0, r7); }

                0b111_001_000 => { $m!(r7, r1, r0); }
                0b111_001_001 => { $m!(r7, r1, r1); }
                0b111_001_010 => { $m!(r7, r1, r2); }
                0b111_001_011 => { $m!(r7, r1, r3); }
                0b111_001_100 => { $m!(r7, r1, r4); }
                0b111_001_101 => { $m!(r7, r1, r5); }
                0b111_001_110 => { $m!(r7, r1, r6); }
                0b111_001_111 => { $m!(r7, r1, r7); }

                0b111_010_000 => { $m!(r7, r2, r0); }
                0b111_010_001 => { $m!(r7, r2, r1); }
                0b111_010_010 => { $m!(r7, r2, r2); }
                0b111_010_011 => { $m!(r7, r2, r3); }
                0b111_010_100 => { $m!(r7, r2, r4); }
                0b111_010_101 => { $m!(r7, r2, r5); }
                0b111_010_110 => { $m!(r7, r2, r6); }
                0b111_010_111 => { $m!(r7, r2, r7); }

                0b111_011_000 => { $m!(r7, r3, r0); }
                0b111_011_001 => { $m!(r7, r3, r1); }
                0b111_011_010 => { $m!(r7, r3, r2); }
                0b111_011_011 => { $m!(r7, r3, r3); }
                0b111_011_100 => { $m!(r7, r3, r4); }
                0b111_011_101 => { $m!(r7, r3, r5); }
                0b111_011_110 => { $m!(r7, r3, r6); }
                0b111_011_111 => { $m!(r7, r3, r7); }

                0b111_100_000 => { $m!(r7, r4, r0); }
                0b111_100_001 => { $m!(r7, r4, r1); }
                0b111_100_010 => { $m!(r7, r4, r2); }
                0b111_100_011 => { $m!(r7, r4, r3); }
                0b111_100_100 => { $m!(r7, r4, r4); }
                0b111_100_101 => { $m!(r7, r4, r5); }
                0b111_100_110 => { $m!(r7, r4, r6); }
                0b111_100_111 => { $m!(r7, r4, r7); }

                0b111_101_000 => { $m!(r7, r5, r0); }
                0b111_101_001 => { $m!(r7, r5, r1); }
                0b111_101_010 => { $m!(r7, r5, r2); }
                0b111_101_011 => { $m!(r7, r5, r3); }
                0b111_101_100 => { $m!(r7, r5, r4); }
                0b111_101_101 => { $m!(r7, r5, r5); }
                0b111_101_110 => { $m!(r7, r5, r6); }
                0b111_101_111 => { $m!(r7, r5, r7); }

                0b111_110_000 => { $m!(r7, r6, r0); }
                0b111_110_001 => { $m!(r7, r6, r1); }
                0b111_110_010 => { $m!(r7, r6, r2); }
                0b111_110_011 => { $m!(r7, r6, r3); }
                0b111_110_100 => { $m!(r7, r6, r4); }
                0b111_110_101 => { $m!(r7, r6, r5); }
                0b111_110_110 => { $m!(r7, r6, r6); }
                0b111_110_111 => { $m!(r7, r6, r7); }

                0b111_111_000 => { $m!(r7, r7, r0); }
                0b111_111_001 => { $m!(r7, r7, r1); }
                0b111_111_010 => { $m!(r7, r7, r2); }
                0b111_111_011 => { $m!(r7, r7, r3); }
                0b111_111_100 => { $m!(r7, r7, r4); }
                0b111_111_101 => { $m!(r7, r7, r5); }
                0b111_111_110 => { $m!(r7, r7, r6); }
                0b111_111_111 => { $m!(r7, r7, r7); }

                _ => panic!("Impossible"),
            }
        }
    }
    macro_rules! unroll2 {
        ($regs:expr, $m:ident) => {
            match $regs {
                0b000_000 => { $m!(r0, r0); }
                0b000_001 => { $m!(r0, r1); }
                0b000_010 => { $m!(r0, r2); }
                0b000_011 => { $m!(r0, r3); }
                0b000_100 => { $m!(r0, r4); }
                0b000_101 => { $m!(r0, r5); }
                0b000_110 => { $m!(r0, r6); }
                0b000_111 => { $m!(r0, r7); }

                0b001_000 => { $m!(r1, r0); }
                0b001_001 => { $m!(r1, r1); }
                0b001_010 => { $m!(r1, r2); }
                0b001_011 => { $m!(r1, r3); }
                0b001_100 => { $m!(r1, r4); }
                0b001_101 => { $m!(r1, r5); }
                0b001_110 => { $m!(r1, r6); }
                0b001_111 => { $m!(r1, r7); }

                0b010_000 => { $m!(r2, r0); }
                0b010_001 => { $m!(r2, r1); }
                0b010_010 => { $m!(r2, r2); }
                0b010_011 => { $m!(r2, r3); }
                0b010_100 => { $m!(r2, r4); }
                0b010_101 => { $m!(r2, r5); }
                0b010_110 => { $m!(r2, r6); }
                0b010_111 => { $m!(r2, r7); }

                0b011_000 => { $m!(r3, r0); }
                0b011_001 => { $m!(r3, r1); }
                0b011_010 => { $m!(r3, r2); }
                0b011_011 => { $m!(r3, r3); }
                0b011_100 => { $m!(r3, r4); }
                0b011_101 => { $m!(r3, r5); }
                0b011_110 => { $m!(r3, r6); }
                0b011_111 => { $m!(r3, r7); }

                0b100_000 => { $m!(r4, r0); }
                0b100_001 => { $m!(r4, r1); }
                0b100_010 => { $m!(r4, r2); }
                0b100_011 => { $m!(r4, r3); }
                0b100_100 => { $m!(r4, r4); }
                0b100_101 => { $m!(r4, r5); }
                0b100_110 => { $m!(r4, r6); }
                0b100_111 => { $m!(r4, r7); }

                0b101_000 => { $m!(r5, r0); }
                0b101_001 => { $m!(r5, r1); }
                0b101_010 => { $m!(r5, r2); }
                0b101_011 => { $m!(r5, r3); }
                0b101_100 => { $m!(r5, r4); }
                0b101_101 => { $m!(r5, r5); }
                0b101_110 => { $m!(r5, r6); }
                0b101_111 => { $m!(r5, r7); }

                0b110_000 => { $m!(r6, r0); }
                0b110_001 => { $m!(r6, r1); }
                0b110_010 => { $m!(r6, r2); }
                0b110_011 => { $m!(r6, r3); }
                0b110_100 => { $m!(r6, r4); }
                0b110_101 => { $m!(r6, r5); }
                0b110_110 => { $m!(r6, r6); }
                0b110_111 => { $m!(r6, r7); }

                0b111_000 => { $m!(r7, r0); }
                0b111_001 => { $m!(r7, r1); }
                0b111_010 => { $m!(r7, r2); }
                0b111_011 => { $m!(r7, r3); }
                0b111_100 => { $m!(r7, r4); }
                0b111_101 => { $m!(r7, r5); }
                0b111_110 => { $m!(r7, r6); }
                0b111_111 => { $m!(r7, r7); }

                _ => panic!("Impossible"),
            }
        }
    }
    macro_rules! unroll1 {
        ($regs:expr, $m:ident) => {
            match $regs {
                0b000 => { $m!(r0); }
                0b001 => { $m!(r1); }
                0b010 => { $m!(r2); }
                0b011 => { $m!(r3); }
                0b100 => { $m!(r4); }
                0b101 => { $m!(r5); }
                0b110 => { $m!(r6); }
                0b111 => { $m!(r7); }

                _ => panic!("Impossible"),
            }
        }
    }
    loop {
        let insn = data[0][ip];
        ip += 1;
        let op = insn >> 28;
        match op {
            // Conditional Move
            0 => {
                macro_rules! cmov {
                    ($a:ident, $b:ident, $c:ident) => {
                        if $c != 0 {
                            $a = $b
                        }
                    }
                };
                unroll3!(insn & 0b111_111_111, cmov);
            }
            // Array Index
            1 => {
                macro_rules! aget {
                    ($a:ident, $b:ident, $c:ident) => {
                        $a = data[$b as usize][$c as usize];
                    }
                };
                unroll3!(insn & 0b111_111_111, aget);
            }
            // Array Amendment
            2 => {
                macro_rules! aset {
                    ($a:ident, $b:ident, $c:ident) => {
                        data[$a as usize][$b as usize] = $c;
                    }
                };
                unroll3!(insn & 0b111_111_111, aset);
            }
            // Addition
            3 => {
                macro_rules! add {
                    ($a:ident, $b:ident, $c:ident) => {
                        $a = $b.wrapping_add($c);
                    }
                };
                unroll3!(insn & 0b111_111_111, add);
            }
            // Multiplication
            4 => {
                macro_rules! mul {
                    ($a:ident, $b:ident, $c:ident) => {
                        $a = $b.wrapping_mul($c);
                    }
                };
                unroll3!(insn & 0b111_111_111, mul);
            }
            // Division
            5 => {
                macro_rules! div {
                    ($a:ident, $b:ident, $c:ident) => {
                        $a = $b / $c;
                    }
                };
                unroll3!(insn & 0b111_111_111, div);
            }
            // Not-And
            6 => {
                macro_rules! nand {
                    ($a:ident, $b:ident, $c:ident) => {
                        $a = !($b & $c);
                    }
                };
                unroll3!(insn & 0b111_111_111, nand);
            }
            // Halt
            7 => break,
            // Allocation
            8 => {
                macro_rules! alloc {
                    ($b:ident, $c:ident) => {
                        let new_arr = vec![0; $c as usize];
                        data.push(new_arr);
                        $b = (data.len() - 1) as u32;
                    }
                };
                unroll2!(insn & 0b111_111, alloc);
            }
            // Abandonment
            9 => {
                macro_rules! free {
                    ($c:ident) => {
                        data[$c as usize].clear();
                    }
                }
                unroll1!(insn & 0b111, free);
            }
            // Output
            10 => {
                macro_rules! output {
                    ($c:ident) => {
                        let v = $c as u8;
                        stdout.write_all(&[v])?;
                        stdout.flush()?;
                    }
                }
                unroll1!(insn & 0b111, output);
            }
            // Input
            11 => {
                macro_rules! input {
                    ($c:ident) => {
                        let mut buf = [0; 1];
                        let res = stdin.read(&mut buf)?;
                        if res == 0 {
                            $c = !0;
                        } else {
                            $c = buf[0] as u32;
                        }
                    }
                }
                unroll1!(insn & 0b111, input);
            }
            // Load Program
            12 => {
                macro_rules! load {
                    ($b:ident, $c:ident) => {
                        match $b {
                            0 => {}
                            v => data[0] = data[v as usize].clone(),
                        }
                        ip = $c as usize;
                    }
                };
                unroll2!(insn & 0b111_111, load);
            }
            // Orthography
            13 => {
                macro_rules! imm {
                    ($a:ident) => {
                        $a = insn & 0b0000_0001_1111_1111_1111_1111_1111_1111;
                    }
                }
                unroll1!((insn >> 25) & 0b111, imm);
            }
            _ => panic!("Invalid operation {}", op),
        }
    }
    Ok(())
}
